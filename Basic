//Return the factorial of the provided integer.

function factorialize(num) {
  if(num <0)
    return -1;
  else if (num == 0)
    return 1;
  else {
    return (num *factorialize(num-1));
  }

  return num;
}
factorialize(5);

//Reverse the provided string.
function reverseString(str) {
  
  var splitString = str.split("");
  
  var reverseArray = splitString.reverse();
  
  var joinArray = reverseArray.join("");
 
  
  return joinArray; 
  
}

reverseString("hello");


//Return true if the given string is a palindrome. Otherwise, return false. 

function palindrome(str) {
  
  
  return str.replace(/[\W_]/g, '').toLowerCase() ===
         
    str.replace(/[\W_]/g, '').toLowerCase().split('').reverse().join('');
  
}
palindrome("eye");

// Return the length of the longest word in the provided sentence.

function findLongestWord(str) {
  var strSplit = str.split(" ");
  var longestWord = 0;
  for(var i = 1; i < strSplit.length;i++){
    if (strSplit[i].length > longestWord){
      longestWord = strSplit[i].length;
    }
  }
  
  return longestWord;
}

findLongestWord("The quick brown fox jumped over the lazy dog");

// Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.

function titleCase(str) {
  
  return str.toLowerCase().split(' ').map(function(word) {

    return (word.charAt(0).toUpperCase() + word.slice(1));

  }).join(' ');
}

titleCase("I'm a little tea pot");

// Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.

function largestOfFour(arr) {
  var results = [];
  for (var n = 0; n < arr.length; n++) {
    var largestNumber = 0;
    for (var sb = 0; sb < arr[n].length; sb++) {
      if (arr[n][sb] > largestNumber) {
        largestNumber = arr[n][sb];
      }
    }

    results[n] = largestNumber;
  }

  return results;

}
largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

// One of the simplest and most widely known ciphers is a Caesar cipher, also known as a shift cipher. In a shift cipher the meanings of the letters are shifted by some set amount.

function rot13(str) { // LBH QVQ VG!
  var answer = [];
  for (var i in str) {
    if (str.charCodeAt(i) < 65 || str.charCodeAt(i) > 91) {
      answer.push(str[i]);
      continue;
    } else {
      if (str.charCodeAt(i) < 78) {
        answer.push(String.fromCharCode(str.charCodeAt(i) + 13));
        continue;
      } else {
        answer.push(String.fromCharCode(str.charCodeAt(i) - 13));
        continue;
      }
    }
  }
  return answer.join("");
}
// Change the inputs below to test
rot13("SERR PBQR PNZC");

// Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. 
//The returned value should be a number.


function getIndexToIns(arr, num) {
  var count = 0;
  // this is our counter variable for results 
  for ( var i = 0; i< arr.length; i++){
    if(arr[i]-num<0){
      // if arr value number is negative it is smaller number. 
      count=count+1;
    }
  }
  return count;
}

getIndexToIns([40, 60], 50);

// You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. 
//Remove all elements from the initial array that are of the same value as these arguments.

function destroyer(arr) {
 
 var args = Array.prototype.slice.call(arguments);
  args.splice(0,1);
  var placeholder = [];
  for(i =0; i < arr.length; i++){
    for( j =0; j < args.length; j++){
      if(arr[i]==args[j]){
      delete arr[i];}
    }
  }
  placeholder = arr;
  return placeholder.filter(removeFalseVar);
}
function removeFalseVar(value){
  return Boolean(value);
  
}


destroyer([1, 2, 3, 1, 2, 3], 2, 3);


//Remove all falsy values from an array.

function bouncer(arr) {
  var newArr = [];
    newArr=  arr.filter(removeFalseVar);
    return newArr;
}
function removeFalseVar(value){
return Boolean(value);
}


bouncer([7, "ate", "", false, 9]);

// Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.

function mutation(arr) {
var first = arr[0].toLowerCase();

  console.log(first);

  var second = arr[1].toLowerCase();

  console.log(second);

  for (var i = 0; i < second.length; i++) {

    if (first.indexOf(second[i]) >= 0) {

      continue;

    } else {

      return false;  

    }

  }

  return true;

}

mutation(["hello", "hey"]);

// Return the remaining elements of an array after chopping off n elements from the head.

function slasher(arr, howMany) {
  if(howMany >= arr.length){
    return [];
  }else{
    for(var i=1; i <= howMany; i++){
      arr.shift();
    }
  }
  return arr;
}

slasher([1, 2, 3], 2);

//Write a function that splits an array (first argument) into groups the length of size (second argument) and returns them as a two-dimensional array.


function chunkArrayInGroups(arr, size) {
var firstArray = arr;
var newArray = [];


while (firstArray.length>0){       
  newArray.push(firstArray.slice(0,size));
  firstArray.splice(0, size);
 }

return newArray;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);

// Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a ... ending.

function truncateString(str, num) {
  if(str.length>num){
    if(num<=3){
      str = str.slice(0,num)+'...';}
    else{
      str = str.slice(0,num-3)+'...';}
  }
      // Clear out that junk in your trunk
  return str;
}

truncateString("A-tisket a-tasket A green and yellow basket", 11);

//Repeat a given string (first argument) num times (second argument). Return an empty string if num is not a positive number.


function repeatStringNumTimes(str, num) {
var repeat = '';
  
  while (num>0){
    repeat += str;
   num --; 
  }
 return repeat; 
}

repeatStringNumTimes("abc", 3);

//Check if a string (first argument, str) ends with the given target string (second argument, target). 

function confirmEnding(str, target) {
  var start = str.length - (target.length);
  if(str.substr(start, str.length) == target){
     return true;
  } else {
     return false;
  }

 
}

confirmEnding("Bastian", "n");




